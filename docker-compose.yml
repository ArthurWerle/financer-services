services:
  postgres:
    networks:
      - database
      - back-end
    image: postgres:15
    env_file:
      - stack.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mordor"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  category-service:
    networks:
      - database
      - back-end
    depends_on:
      postgres:
        condition: service_healthy
    pull_policy: build
    restart: unless-stopped
    build:
      context: ./category-service/
      dockerfile: ./${DOCKERFILE:-Dockerfile}
    ports:
      - "8080:8080"
    env_file:
      - stack.env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=category-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/healthcheck"]
      interval: 5s
      timeout: 5s
      retries: 3

  redis:
    image: "redis:latest"
    restart: unless-stopped
    networks:
      - database
      - back-end
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  transaction-service:
    networks:
      - database
      - back-end
    depends_on:
      postgres:
        condition: service_healthy
      category-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    pull_policy: build
    restart: unless-stopped
    build:
      context: ./transaction-service/
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    env_file:
      - stack.env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=transaction-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  bff-service:
    networks:
      - back-end
    depends_on:
      postgres:
        condition: service_healthy
      category-service:
        condition: service_healthy
      transaction-service:
        condition: service_healthy
    pull_policy: build
    restart: unless-stopped
    build:
      context: ./bff-service/
      dockerfile: Dockerfile
    ports:
      - "8082:3000"
    env_file:
      - stack.env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=bff-service

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "8889:8889" # Prometheus metrics exposed by the collector
    networks:
      - back-end
    restart: unless-stopped
    depends_on:
      - jaeger

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector HTTP
      - "4317"        # OTLP gRPC (internal)
      - "4318"        # OTLP HTTP (internal)
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - back-end
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - "9090:9090"
    networks:
      - back-end
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - back-end
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  database:
    driver: bridge
  back-end:
    driver: bridge
